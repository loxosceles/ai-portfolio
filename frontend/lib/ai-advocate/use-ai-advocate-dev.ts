'use client';

import { useState } from 'react';
import { IAIResponse } from './use-ai-advocate';

// Mock responses for development
const MOCK_RESPONSES: Record<string, string> = {
  default:
    "I'm a simulated AI response for local development. In production, this would be generated by Amazon Bedrock.",
  skills:
    "The developer has extensive experience with React, TypeScript, Node.js, and AWS services. They've built several full-stack applications using serverless architectures and have a strong background in cloud infrastructure.",
  experience:
    "The developer has over 5 years of experience building web applications, with a focus on serverless architectures and cloud-native solutions. They've worked on projects ranging from small startups to enterprise applications.",
  education:
    'The developer has a degree in Computer Science and has completed several professional certifications in AWS and cloud architecture.',
  projects:
    'The developer has worked on various projects including e-commerce platforms, content management systems, and data visualization tools. Their portfolio showcases their ability to build scalable, user-friendly applications.'
};

export function useAIAdvocateDev() {
  const [isLoading, setIsLoading] = useState(false);
  const [response, setResponse] = useState<IAIResponse | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Function to simulate asking a question
  const ask = (question: string) => {
    setIsLoading(true);
    setError(null);

    // Simulate network delay
    setTimeout(() => {
      try {
        // Generate a response based on keywords in the question
        let answer = MOCK_RESPONSES.default;

        const lowerQuestion = question.toLowerCase();
        if (
          lowerQuestion.includes('skill') ||
          lowerQuestion.includes('know') ||
          lowerQuestion.includes('tech')
        ) {
          answer = MOCK_RESPONSES.skills;
        } else if (lowerQuestion.includes('experience') || lowerQuestion.includes('work')) {
          answer = MOCK_RESPONSES.experience;
        } else if (
          lowerQuestion.includes('education') ||
          lowerQuestion.includes('study') ||
          lowerQuestion.includes('learn')
        ) {
          answer = MOCK_RESPONSES.education;
        } else if (lowerQuestion.includes('project') || lowerQuestion.includes('portfolio')) {
          answer = MOCK_RESPONSES.projects;
        }

        setResponse({
          answer,
          context: 'Development mode response'
        });
        setIsLoading(false);
      } catch (err) {
        console.error('Error generating response:', err);
        setError('Error generating response');
        setIsLoading(false);
      }
    }, 1000);
  };

  return {
    ask,
    response,
    isLoading,
    error
  };
}
