'use client';

import { useSearchParams } from 'next/navigation';
import { useAuth } from '@/lib/auth/auth-context';
import { AdvocateGreetingData } from '@/lib/advocate-greeting/advocate-greeting-service';
import { AIResponse } from '@/lib/ai-advocate/use-ai-advocate';

// Mock data for advocate greeting
const ADVOCATE_GREETING_MOCK: AdvocateGreetingData = {
  linkId: 'local-interceptor',
  companyName: 'Local Demo Company',
  recruiterName: 'Local Demo Recruiter',
  context: 'local development',
  greeting: 'Welcome to local development!',
  message: 'This is mock data from the local request interceptor. No real API calls are made.',
  skills: ['React', 'TypeScript', 'AWS', 'Node.js', 'GraphQL', 'Serverless']
};

// Mock responses for AI advocate
const AI_ADVOCATE_MOCKS: Record<string, string> = {
  default:
    "I'm a simulated AI response from the local interceptor. In production, this would be generated by Amazon Bedrock.",
  skills:
    "The developer has extensive experience with React, TypeScript, Node.js, and AWS services. They've built several full-stack applications using serverless architectures.",
  experience:
    'The developer has over 5 years of experience building web applications, with a focus on serverless architectures and cloud-native solutions.',
  education:
    'The developer has a degree in Computer Science and has completed several professional certifications in AWS and cloud architecture.',
  projects:
    'The developer has worked on various projects including e-commerce platforms, content management systems, and data visualization tools.'
};

/**
 * Generic local request interceptor
 * Intercepts requests in local environment and provides mock data
 */
export function useLocalRequestInterceptor() {
  const { environment } = useAuth();
  const searchParams = useSearchParams();
  const visitorParam = searchParams?.get('visitor');

  // Should intercept if in local environment with visitor parameter
  const shouldIntercept = environment === 'local' && !!visitorParam;

  // Generate visitor-specific advocate greeting mock data
  const getAdvocateGreetingMock = (): AdvocateGreetingData => {
    if (!visitorParam) return ADVOCATE_GREETING_MOCK;

    return {
      ...ADVOCATE_GREETING_MOCK,
      linkId: visitorParam,
      recruiterName: `Local Visitor ${visitorParam.substring(0, 6)}`,
      message: `This is local development mock data for visitor ${visitorParam}. The interceptor is working!`
    };
  };

  // Generate AI advocate mock response based on question
  const getAIAdvocateMock = (question: string): AIResponse => {
    const lowerQuestion = question.toLowerCase();
    let answer = AI_ADVOCATE_MOCKS.default;

    if (
      lowerQuestion.includes('skill') ||
      lowerQuestion.includes('know') ||
      lowerQuestion.includes('tech')
    ) {
      answer = AI_ADVOCATE_MOCKS.skills;
    } else if (lowerQuestion.includes('experience') || lowerQuestion.includes('work')) {
      answer = AI_ADVOCATE_MOCKS.experience;
    } else if (
      lowerQuestion.includes('education') ||
      lowerQuestion.includes('study') ||
      lowerQuestion.includes('learn')
    ) {
      answer = AI_ADVOCATE_MOCKS.education;
    } else if (lowerQuestion.includes('project') || lowerQuestion.includes('portfolio')) {
      answer = AI_ADVOCATE_MOCKS.projects;
    }

    return {
      answer,
      context: 'Local interceptor response'
    };
  };

  return {
    shouldIntercept,
    getAdvocateGreetingMock,
    getAIAdvocateMock
  };
}
